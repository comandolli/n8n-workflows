name: deploy-n8n-workflows

on:
  push:
    branches: [ "main" ]
    paths:
      - "workflows/**"
      - ".github/workflows/deploy-n8n-workflows.yml"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Envia os JSONs para a VPS
      - name: Upload workflows to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "workflows/*"
          target: "/root/n8n-import/"

      # 2) Importa dentro do container n8n sem derrubar o serviço
      - name: Import into n8n container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            set -x
            echo "Containers na VPS (nome/portas):"
            docker ps --format '{{.Names}}\t{{.Ports}}' | sed 's/\t/ /g'

            # permite override via variável de ambiente (ex: secret N8N_CONTAINER)
            if [ -n "${N8N_CONTAINER:-}" ]; then
              N8N="$N8N_CONTAINER"
            else
              # tenta primeiro containers com a porta publicada externamente
              N8N=$(docker ps --format '{{.Names}}\t{{.Ports}}' \
                | awk '$1 ~ /n8n/ && $2 ~ /5678->/ {print $1; exit}')

              # fallback para containers swarm que só mostram 5678/tcp
              if [ -z "${N8N:-}" ]; then
                N8N=$(docker ps --format '{{.Names}}\t{{.Ports}}' \
                  | awk '$1 ~ /n8n/ && $2 ~ /5678\/tcp/ {print $1; exit}')
              fi
            fi

            if [ -z "${N8N:-}" ]; then
              echo "ERRO: não encontrei container n8n (ajuste a variável N8N_CONTAINER)."
              exit 1
            fi
            echo "Usando container: $N8N"

            mkdir -p /root/n8n-import
            docker exec "$N8N" sh -lc 'mkdir -p /home/node/import'
            docker cp /root/n8n-import/. "$N8N":/home/node/import/

            # detecta se o usuário node existe, senão roda como padrão do container
            if docker exec "$N8N" sh -lc 'id -u node >/dev/null 2>&1'; then
              EXEC_USER="-u node"
            else
              EXEC_USER=""
            fi

            docker exec $EXEC_USER "$N8N" n8n import:workflow \
              --separate --input=/home/node/import --overwrite --activate

            docker exec $EXEC_USER "$N8N" sh -lc 'rm -rf /home/node/import/*' || true
            echo "Import/activate finalizados sem reiniciar o n8n."
